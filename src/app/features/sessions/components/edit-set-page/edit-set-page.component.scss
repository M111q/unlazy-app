@use "../../../../../styles/variables" as vars;
@use "../../../../../styles/mixins" as mixins;

.edit-set-page {
  max-width: 600px;
  margin: 0 auto;
  padding: vars.$spacing-sm;

  .page-header {
    display: flex;
    align-items: center;
    gap: vars.$spacing-sm;
    margin-bottom: vars.$spacing-lg;

    h1 {
      margin: 0;
      font-size: vars.$font-size-2xl;
      font-weight: vars.$font-weight-medium;
      color: var(--mat-sys-on-surface);
    }

    button {
      flex-shrink: 0;
    }
  }

  .loading-container {
    @include mixins.loading-container();
    padding: vars.$spacing-xl vars.$spacing-sm;

    p {
      margin-top: vars.$spacing-sm;
      color: var(--mat-sys-on-surface-variant);
    }
  }

  .error-container {
    @include mixins.error-container();
    padding: vars.$spacing-xl vars.$spacing-sm;

    .error-icon {
      font-size: vars.$spacing-xl;
      width: vars.$spacing-xl;
      height: vars.$spacing-xl;
      color: var(--mat-sys-error);
      margin-bottom: vars.$spacing-sm;
    }

    h2 {
      margin: 0 0 vars.$spacing-xs 0;
      color: var(--mat-sys-error);
      font-size: vars.$font-size-xl;
      font-weight: vars.$font-weight-medium;
    }

    p {
      margin: 0 0 vars.$spacing-lg 0;
      color: var(--mat-sys-on-surface-variant);
      max-width: 400px;
    }
  }

  .form-container {
    .full-width {
      width: 100%;
      margin-bottom: vars.$spacing-sm;
    }

    mat-card {
      mat-card-header {
        margin-bottom: vars.$spacing-sm;

        mat-card-title {
          color: var(--mat-sys-on-surface);
          font-size: vars.$font-size-xl;
          font-weight: vars.$font-weight-medium;
        }

        mat-card-subtitle {
          color: var(--mat-sys-on-surface-variant);
          margin-top: vars.$spacing-xs;
        }
      }

      mat-card-content {
        padding-top: 0;

        form {
          display: flex;
          flex-direction: column;
          gap: vars.$spacing-xs;
        }

        mat-form-field {
          &:last-child {
            margin-bottom: 0;
          }

          // Readonly field styling
          &:has(input[readonly]) {
            .mat-mdc-text-field-wrapper {
              background-color: var(--mat-sys-surface-variant);
              opacity: 0.7;
            }
          }
        }
      }

      mat-card-actions {
        padding-top: vars.$spacing-md;
        gap: vars.$spacing-xs;

        button {
          min-width: 100px;

          .button-spinner {
            margin-right: vars.$spacing-xs;
          }

          mat-icon {
            margin-right: vars.$spacing-xs;
          }

          // Disabled state for unchanged form
          &[disabled]:not(.mat-mdc-button-disabled) {
            opacity: 0.6;
            cursor: not-allowed;
          }
        }
      }
    }
  }
}

// Responsive design
@include mixins.media-max(tablet) {
  .edit-set-page {
    padding: vars.$spacing-xs;

    .page-header {
      margin-bottom: vars.$spacing-sm;

      h1 {
        font-size: vars.$font-size-xl;
      }
    }

    .form-container {
      mat-card {
        mat-card-actions {
          flex-direction: column-reverse;
          align-items: stretch;

          button {
            width: 100%;
            margin: 0;

            &:first-child {
              margin-top: vars.$spacing-xs;
            }
          }
        }
      }
    }
  }
}

// High contrast mode support
@include mixins.high-contrast {
  .edit-set-page {
    .error-container {
      .error-icon {
        filter: contrast(1.2);
      }
    }

    .form-container {
      mat-card-content {
        mat-form-field:has(input[readonly]) {
          .mat-mdc-text-field-wrapper {
            border: 2px solid var(--mat-sys-outline-variant);
          }
        }
      }
    }
  }
}

// Reduced motion support
@include mixins.reduced-motion {
  .edit-set-page {
    .loading-container {
      mat-spinner {
        animation: none;
      }
    }

    .button-spinner {
      animation: none;
    }
  }
}

// Focus management
.edit-set-page {
  button:focus-visible,
  input:focus-visible {
    @include mixins.focus-visible(var(--mat-sys-primary));
  }
}

// Form validation states
.edit-set-page {
  .mat-mdc-form-field.mat-form-field-invalid {
    .mat-mdc-text-field-wrapper {
      .mat-mdc-form-field-outline .mat-mdc-notched-outline-notch {
        border-color: var(--mat-sys-error);
      }
    }
  }

  // Highlight changed fields
  .mat-mdc-form-field.mat-form-field-should-float:not(.mat-form-field-invalid) {
    .mat-mdc-text-field-wrapper {
      .mat-mdc-form-field-outline .mat-mdc-notched-outline-notch {
        border-color: var(--mat-sys-primary);
        border-width: vars.$border-width-medium;
      }
    }
  }
}

// Animation for form changes
.edit-set-page {
  .form-container {
    mat-card-actions {
      button[mat-raised-button] {
        transition: vars.$transition-default;

        &:not([disabled]) {
          transform: translateY(0);
          box-shadow: var(--mat-sys-elevation-level2);
        }

        &[disabled] {
          transform: translateY(1px);
          box-shadow: var(--mat-sys-elevation-level1);
        }
      }
    }
  }
}

// Success and error snackbar styles (global)
::ng-deep {
  .success-snackbar {
    --mdc-snackbar-container-color: var(--mat-sys-primary-container);
    --mdc-snackbar-supporting-text-color: var(--mat-sys-on-primary-container);
  }

  .error-snackbar {
    --mdc-snackbar-container-color: var(--mat-sys-error-container);
    --mdc-snackbar-supporting-text-color: var(--mat-sys-on-error-container);
  }
}
